version: '3.8'

services:
  # Main application
  doc2any-blog:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: doc2any-blog
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_GA_ID=UA-47319849-1
      - NEXT_PUBLIC_ADSENSE_CLIENT=ca-pub-2591708616273466
    restart: unless-stopped
    networks:
      - doc2any-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.doc2any.rule=Host(`doc2any.grapph.com`)"
      - "traefik.http.routers.doc2any.tls=true"
      - "traefik.http.routers.doc2any.tls.certresolver=letsencrypt"
      - "traefik.http.services.doc2any.loadbalancer.server.port=3000"

  # Reverse proxy with SSL (optional)
  traefik:
    image: traefik:v3.0
    container_name: doc2any-traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=info@grapph.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - doc2any-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.grapph.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: doc2any-redis
    restart: unless-stopped
    networks:
      - doc2any-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: doc2any-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - doc2any-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: doc2any-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - doc2any-network

networks:
  doc2any-network:
    driver: bridge

volumes:
  traefik-letsencrypt:
  redis-data:
  prometheus-data:
  grafana-data:
